В основном проектирование идет по ходу разработки
Стадии проектирования (достаточно услоные)
- Анализ требования предметной области
--- составление USE CASES
--- аналитический процесс с участием stakeholders (владельцев, экспертов доменов)
--- концептуальная схема БД
- Логическое моделирование данных предметной области
--- детализирует концептуальную модель БД
--- разные источники включают разные компоненты в логическую модель
--- полностью описывает все ключи
--- полностью определяет типы данных (безотносительно конкретной СУБД)
--- полностью описывает все логические ограничения (спорно)
--- нормализация отношений обычно максимум до формы 3НФ
- Физическое проектирование и нормализация
--- выбирается конкретная СУБД
--- определяются типы данных для этой СУБД
--- определяются индексы
--- могут определяться представления (views)
--- определяются ограничения на доступ (security)

По окончанию проектирования строят ER Diagrams (есть разные инструменты для этого)

Ошибки проектирования
- Возможность внесения невалидных данных
- Потеря данных при создании неправильных связей
- Еет изначально нужных данных
- Игнорирование нормализации - избыточность данных
- Отсутствие стандартов именования на проекте
- Одна таблица для разных по смыслу данных
- Наплевательское отношение к актуальность репрезентации данных (домен постоянно меняется)
- Поле, содержащее более 1 логической части (full_name) - нужно 3 (first_name, last_name, full_name)
- Поле, содержащее более 1 значения (массив, когда не надо) - например, телефонные номера
- Вычислимые поля (полная зарплата за все время работы) цель таблицы - хранить данные, а не вычислять
- Неправильно выбранные первичные ключи (ИНН - плохой PK)
- Избегайте композитных PK (может приводить к деградации производительности)
- В идеале, в таблице кроме суррогатного ключа, должны быть натуральные (суррогатные - не имеют реального смысла, просто уникально
идентифицируют строку (1,2,3,N))
- Правила иногда можно нарушать. Вычислимое поле дает perfomance boost? Делаем вычислимое поле

Базовые советы по проектированию
- Таблица: объект, событие, абстрация
- Поле (колонка): свойство объекта
- Запись (строка): совокупность полей
- Значения в каждом поле по отдельности не должны содержать не валидных данных
- Значения в совокупности полей должны быть непротиворечивы
- Каждая таблица представляет объект, а строки - состояния этого объекта


Нормальная форма (НФ) - свойство отношения(таблицы), характеризующее его с точки зрения избыточности (данных)
Нормализация - процесс минимизации избыточности отношения (приведение к НФ), устранение дубликатов, большие таблицы на маленькие

1НФ требования
- нет строк-дубликатов
- все атрибуты простых типов данных (не массивы и т.д.)
- все значения скалярные (простые, одно значение простогот типа данных)
Пример:
Лев Толстой | Война и мир, Анна Каренина, Старик в церкви
Федор Достоевский | Игрок, Идиот, Бесы
-- тут нужно разбить на строки author_name : book_title

2НФ требования
- таблица удовлетвояет 1НФ
- есть первичный ключ
- все атрибуты (поля) описывают первичный ключ целиком, а не лишь его часть
Пример:
author_id / book_id / author_name / book_title
1           1         Толстой       Война и Мир
1           2         Толстой       Анна Каренина
- поэтому надо композитный ключ в отдельную таблицу, book и author в отдельные

3НФ требования
- таблица удовлетвояет 2НФ
- нет зависимостей неключевых атрибутов от других (все атрибуты зависят только от первичного ключа)
поэтому нужно вынести publisher в отдельную таблицу. Декомпозировать

Также есть денормализоация данных - чтобы избежать излишних JOIN